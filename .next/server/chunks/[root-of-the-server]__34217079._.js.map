{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/armandoponce/VSCodeApps/claude-code-workflows/todo-app/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const db =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = db"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,KACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/armandoponce/VSCodeApps/claude-code-workflows/todo-app/src/app/api/todos/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { db } from '@/lib/db'\n\n// GET all todos\nexport async function GET() {\n  try {\n    const todos = await db.todo.findMany({\n      orderBy: { order: 'asc' }\n    })\n    return NextResponse.json(todos)\n  } catch (error) {\n    console.error('Error fetching todos:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch todos' },\n      { status: 500 }\n    )\n  }\n}\n\n// POST create a new todo\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const { text } = body\n\n    if (!text || typeof text !== 'string') {\n      return NextResponse.json(\n        { error: 'Text is required' },\n        { status: 400 }\n      )\n    }\n\n    // Get the highest order value to place new todo at the end\n    const lastTodo = await db.todo.findFirst({\n      orderBy: { order: 'desc' }\n    })\n\n    const newOrder = (lastTodo?.order || 0) + 1\n\n    const todo = await db.todo.create({\n      data: {\n        text: text.trim(),\n        order: newOrder\n      }\n    })\n\n    return NextResponse.json(todo, { status: 201 })\n  } catch (error) {\n    console.error('Error creating todo:', error)\n    return NextResponse.json(\n      { error: 'Failed to create todo' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,wHAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;YACnC,SAAS;gBAAE,OAAO;YAAM;QAC1B;QACA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,GAAG;QAEjB,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAElB;QAEA,2DAA2D;QAC3D,MAAM,WAAW,MAAM,wHAAE,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,SAAS;gBAAE,OAAO;YAAO;QAC3B;QAEA,MAAM,WAAW,CAAC,UAAU,SAAS,CAAC,IAAI;QAE1C,MAAM,OAAO,MAAM,wHAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YAChC,MAAM;gBACJ,MAAM,KAAK,IAAI;gBACf,OAAO;YACT;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;IAC/C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}